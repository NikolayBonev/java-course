import java.util.NoSuchElementException;

public class Deque2<E> {
	private class Node<E>{
		Node<E> left, right;
		E item;
		
		public Node() {
			this.left = null;
			this.right = null;
			this.item = null;
		}
		
		public Node(E item) throws NullPointerException{
			this();
			
			if (item == null) { 
		    	  throw new NullPointerException();
		    }
			
			this.item = item;
		}
		
		public Node(E item, Node<E> nextElem) throws NullPointerException{
			this(item);
			this.right = nextElem;
		}
		
		public Node(Node<E> prevElem, E item) throws NullPointerException{
			this(item);
			this.left = prevElem;
		}
	}
	
	private Node head;
	private Node tail;
	private int count;
	
	public Deque2() {
		this.head = null;
		this.tail = null;
		this.count = 0;
	}
	
	public void offerFirst(E item){
		if(this.head == null){
			this.head = new Node<E>(item);
			this.tail = this.head;
		}else{
			Node newNode = new Node<E>(item, head);
			head = newNode;
		}
		
		count++;
	}
	
	public void offerLast(E item){
		if(this.head == null){
			this.head = new Node<E>(item);
			this.tail = this.head;
		}else{
			this.tail = new Node<E>(this.tail, item);
		}
		
		count++;
	}
	
	public void offer(E item){
		offerLast(item);
	}
	
	public E peekFirst(){
		return (E) head.item;
	}
	
	public E peekLast(){
		return (E) tail.item;
	}
	
	public E peek(){
		return peekLast();
	}
	
	public E pollFirst(){
		if(isEmpty()){
			return null;
		}
		
		E item = (E) head.item;
		 
		count--;
		
		if (count==0) {
			head = null;
		    tail = null;
		} else {
			head = head.right;
		}
		
		return item;
	}
	
	public E pollLast(){
		if(isEmpty()){
			return null;
		}
		
		E item = (E) tail.item;
		
		count --;
		 
		if (count==0) {
			head = null;
		    tail = null;
		} else {
			tail = tail.left;
		}
		
		return item;
	}
	
	public E poll(){
		return pollLast();
	}
	
	public E removeFirst(){
		E item = pollFirst();
		
		if(item == null){
			throw new NoSuchElementException();
		}
		
		return item;
	}
	
	public E removeLast(){
		E item = pollFirst();
		
		if(item == null){
			throw new NoSuchElementException();
		}
		
		return item;
	}
	
	public E remove(){
		return removeLast();
	}
	
	public boolean isEmpty(){
		
		if(head == null){
			return true;
		}
		
		return false;
	}
	
	public boolean isEmptyReverse(){
		
		if(tail == null){
			return true;
		}
		
		return false;
	}
	
	public int size(){
		return count;
	}
	
}
