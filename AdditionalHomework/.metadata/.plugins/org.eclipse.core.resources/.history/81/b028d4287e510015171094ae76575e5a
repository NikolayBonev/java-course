package treebfs;

import java.util.ArrayList;

public class Tree<T> {
	
	@SuppressWarnings("hiding")
	private class TreeNode<T>{
		private T value;
		private boolean hasParent;
		private ArrayList<TreeNode<T>> children;
		
		public TreeNode(T value){
			if (value == null) {
				throw new IllegalArgumentException("Cannot insert null value!");
            }
			
			this.value = value;
			this.children = new ArrayList<TreeNode<T>>();
		}

		public T getValue() {
			return this.value;
		}
		
		public void addChild(TreeNode<T> child){
			if (child == null) {
                throw new IllegalArgumentException("Cannot insert null value!");
            }
			
			if (child.hasParent) {
                throw new IllegalArgumentException("The node already has a parent!");
            }
			
			child.hasParent = true;
            this.children.add(child);
		}
		
		public TreeNode<T> getChild(int index) {
            return this.children.get(index);
        }
		
		public int getChildrenCount() {
            return this.children.size();
        }
		
	}
	
	private TreeNode<T> root;
	
	public Tree(T item){
		if(item == null){
			throw new IllegalArgumentException("Cannot insert null value!");
		}
		
		this.root = new TreeNode<T>(item);
	}

	@SuppressWarnings("unchecked")
	public Tree(T value, Tree<T> ...children){
        this(value);
       
        for (Tree<T> child : children) {
            this.root.addChild(child.root);
        }
    }
	
	public TreeNode<T> getRoot() {
		return root;
	}
	
	public ArrayList<TreeNode<T>> getChildNodes(){
        if (this.root != null)
        {
            return this.root.children;
        }      
        return new ArrayList<TreeNode<T>>();
    }
	
	private void printBFS(TreeNode<T> root) {
        if (this.root == null) {
          return;
        }
        
        
        
        TreeNode<T> child = null;
        for (int i = 0; i < root.getChildrenCount(); i++) {
            child = root.getChild(i);
            printBFS(child);
        }
        
        System.out.print(" " + root.getValue() + ",");
    }
	
	public void printBFS() {
        this.printBFS(this.root);
    }

}